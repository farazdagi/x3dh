package x3dh

import (
	"bytes"
	"testing"
)

func TestX25519PublicKey(t *testing.T) {
	tests := []struct {
		privateKey PrivateKey
		publicKey  PublicKey
	}{
		{
			[32]byte{0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1, 0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0, 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a},
			[32]byte{0x85, 0x20, 0xf0, 0x09, 0x89, 0x30, 0xa7, 0x54, 0x74, 0x8b, 0x7d, 0xdc, 0xb4, 0x3e, 0xf7, 0x5a, 0x0d, 0xbf, 0x3a, 0x0d, 0x26, 0x38, 0x1a, 0xf4, 0xeb, 0xa4, 0xa9, 0x8e, 0xaa, 0x9b, 0x4e, 0x6a},
		},
		{
			[32]byte{0x5d, 0xab, 0x08, 0x7e, 0x62, 0x4a, 0x8a, 0x4b, 0x79, 0xe1, 0x7f, 0x8b, 0x83, 0x80, 0x0e, 0xe6, 0x6f, 0x3b, 0xb1, 0x29, 0x26, 0x18, 0xb6, 0xfd, 0x1c, 0x2f, 0x8b, 0x27, 0xff, 0x88, 0xe0, 0xeb},
			[32]byte{0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61, 0xc2, 0xec, 0xe4, 0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78, 0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14, 0x6f, 0x88, 0x2b, 0x4f},
		},
		{
			[32]byte{0xa8, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0xab, 0x6b},
			[32]byte{0xe3, 0x71, 0x2d, 0x85, 0x1a, 0x0e, 0x5d, 0x79, 0xb8, 0x31, 0xc5, 0xe3, 0x4a, 0xb2, 0x2b, 0x41, 0xa1, 0x98, 0x17, 0x1d, 0xe2, 0x09, 0xb8, 0xb8, 0xfa, 0xca, 0x23, 0xa1, 0x1c, 0x62, 0x48, 0x59},
		},
		{
			[32]byte{0xc8, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0xcd, 0x4d},
			[32]byte{0xb5, 0xbe, 0xa8, 0x23, 0xd9, 0xc9, 0xff, 0x57, 0x60, 0x91, 0xc5, 0x4b, 0x7c, 0x59, 0x6c, 0x0a, 0xe2, 0x96, 0x88, 0x4f, 0x0e, 0x15, 0x02, 0x90, 0xe8, 0x84, 0x55, 0xd7, 0xfb, 0xa6, 0x12, 0x6f},
		},
	}

	kex := New()
	for _, tt := range tests {
		publicKey := kex.Curve().PublicKey(tt.privateKey)

		if !bytes.Equal(tt.publicKey[:], publicKey[:]) {
			t.Errorf("Invalid PublicKey returned, expected: '%x', got '%x'", tt.publicKey, publicKey)
		}
	}
}

func TestX25519ComputeSecret(t *testing.T) {
	tests := []struct {
		privateKey   PrivateKey
		publicKey    PublicKey
		sharedSecret [32]byte
	}{
		{
			// see https://tools.ietf.org/html/rfc7748#section-6.1
			[32]byte{0x77, 0x07, 0x6d, 0x0a, 0x73, 0x18, 0xa5, 0x7d, 0x3c, 0x16, 0xc1, 0x72, 0x51, 0xb2, 0x66, 0x45, 0xdf, 0x4c, 0x2f, 0x87, 0xeb, 0xc0, 0x99, 0x2a, 0xb1, 0x77, 0xfb, 0xa5, 0x1d, 0xb9, 0x2c, 0x2a},
			[32]byte{0xde, 0x9e, 0xdb, 0x7d, 0x7b, 0x7d, 0xc1, 0xb4, 0xd3, 0x5b, 0x61, 0xc2, 0xec, 0xe4, 0x35, 0x37, 0x3f, 0x83, 0x43, 0xc8, 0x5b, 0x78, 0x67, 0x4d, 0xad, 0xfc, 0x7e, 0x14, 0x6f, 0x88, 0x2b, 0x4f},
			[32]byte{0x4a, 0x5d, 0x9d, 0x5b, 0xa4, 0xce, 0x2d, 0xe1, 0x72, 0x8e, 0x3b, 0xf4, 0x80, 0x35, 0x0f, 0x25, 0xe0, 0x7e, 0x21, 0xc9, 0x47, 0xd1, 0x9e, 0x33, 0x76, 0xf0, 0x9b, 0x3c, 0x1e, 0x16, 0x17, 0x42},
		},
	}

	kex := New()
	for _, tt := range tests {
		sharedSecret := kex.Curve().ComputeSecret(tt.privateKey, tt.publicKey)

		if !bytes.Equal(tt.sharedSecret[:], sharedSecret[:]) {
			t.Errorf("Invalid shared secret computed, expected: '%x', got '%x'", tt.sharedSecret, sharedSecret)
		}
	}
}

func TestX25519KeyAgreement(t *testing.T) {
	kex := New()

	alicePublicKey, alicePrivateKey, err := kex.GenerateKeyPair(nil)
	if err != nil {
		t.Fatal("Cannot generate key for Alice")
	}

	expectedPublicKey := kex.Curve().PublicKey(alicePrivateKey)
	if !bytes.Equal(alicePublicKey[:], expectedPublicKey[:]) {
		t.Fatalf("Invalid pulic key for Alice, expected: %x, got: %x", expectedPublicKey, alicePublicKey)
	}

	bobPublicKey, bobPrivateKey, err := kex.GenerateKeyPair(nil)
	if err != nil {
		t.Fatal("Cannot generate key for Bob")
	}

	expectedPublicKey = kex.Curve().PublicKey(bobPrivateKey)
	if !bytes.Equal(bobPublicKey[:], expectedPublicKey[:]) {
		t.Fatalf("Invalid pulic key for Bob, expected: %x, got: %x", expectedPublicKey, bobPublicKey)
	}

	aliceSharedSecret := kex.Curve().ComputeSecret(alicePrivateKey, bobPublicKey)
	bobSharedSecret := kex.Curve().ComputeSecret(bobPrivateKey, alicePublicKey)

	if !bytes.Equal(aliceSharedSecret, bobSharedSecret) {
		t.Errorf("Shared key mismatch, Alice: %x, Bob: %x", aliceSharedSecret, bobSharedSecret)
	}
}
